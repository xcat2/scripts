#!/bin/bash
# 
#-- this script is run after all packages from $profile.pkglist are installed
#-- 
#-- it gets these arguments:
#-- 
#-- $1 = install root (chroot directory for profile)
#-- $2 = OS version
#-- $3 = architecture
#-- $4 = profile name
#-- $5 = work dir (where genimage is located)
#-- 

set -e

thisdir=`dirname $0`
thisscript=`basename $0`
source $thisdir/../functions $*

mount_dev
mount_proc

run_chroot_if_required $thisdir/$thisscript

if [ $chrooted == "no" ]; then 
   echo "Error: This must be run in chroot environment for diskless images" 
   exit 0
fi 

#
# Setting up the CUDA paths
#
if [ ! -e /etc/profile.d/cuda.sh ]; then
    cat >/etc/profile.d/cuda.sh <<"EOF"
CUDABIN=/usr/local/cuda/bin
CUDALIB=/usr/local/cuda/lib64

if ! echo $LD_LIBRARY_PATH | /bin/grep -q $CUDALIB
then
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH${LD_LIBRARY_PATH:+:}$CUDALIB
fi

if ! echo $PATH | /bin/grep -q $CUDABIN
then
    PATH=$PATH${PATH:+:}$CUDABIN
fi

export LD_LIBRARY_PATH PATH
EOF
fi

# uncomment this for debugging
# set -x; export PS4='+($(basename ${BASH_SOURCE}):${LINENO}):' 

# udev patch according to:
#  https://github.ibm.com/DCS-research/WSC-coral/issues/224
if [[ $(yum list cuda | awk '/cuda.ppc64le/ {print $2}') =~ ^9\.2\. ]]; then
    if [ -e /lib/udev/rules.d/40-redhat.rules ]; then
      sed -i /SUBSYSTEM==\"memory\"/d /lib/udev/rules.d/40-redhat.rules
    fi
else
   # hard coded the above for CUDA 9.2, print warning message incase this needs to be updated
   logInfo "WARNING memory was NOT removed from /lib/udev/rules.d/40-redhat.rules, is this expected?"
fi

#
# use dracut module-setup to enable the options in nvidia.conf file
#
nvidia_conf=/etc/modprobe.d/nvidia.conf
msetup=/usr/lib/dracut/modules.d/95nvidia/module-setup.sh
mkdir -p $(dirname $msetup);
cat >$msetup <<"EOF"
#!/bin/bash
# module setup file for dracut
# nvidia patch described in:
#   https://github.ibm.com/DCS-research/WSC-coral/issues/324

check() {

    return 0
}

depends() {
     return 0;
}

installkernel() {
   return 0;
}

install() {
    [ -d $initdir/etc/modprobe.d/ ] || mkdir $initdir/etc/modprobe.d
    cat >$initdir/etc/modprobe.d/nvidia.conf <<"MPEOF"
#created by dracut module-setup.sh
options nvidia NVreg_EnableStreamMemOPs=1 NVreg_RegistryDwords="PeerMappingOverride=1"
MPEOF
}

EOF

chmod 755 $msetup
logInfo "Adding nvidia to dracutmodules in /etc/dracut.conf.d/nvidia_patch.conf..."
cat >/etc/dracut.conf.d/nvidia_patch.conf <<EOF
dracutmodules+="nvidia"
EOF

#
# nvidia persistance mode
#   http://docs.nvidia.com/deploy/driver-persistence/index.html
#
perst_svc=/usr/lib/systemd/system/nvidia-persistenced.service
cat >$perst_svc <<EOF
# generated by xcat postinstall script: $0
[Unit]
Description=NVIDIA Persistence Daemon
Wants=syslog.target

[Service]
Type=forking
PIDFile=/var/run/nvidia-persistenced/nvidia-persistenced.pid
Restart=always
ExecStart=/usr/bin/nvidia-persistenced --verbose
ExecStopPost=/bin/rm -rf /var/run/nvidia-persistenced

[Install]
WantedBy=multi-user.target
EOF

logInfo "Enabling nvidia-persistenced service..."
systemctl enable nvidia-persistenced.service


